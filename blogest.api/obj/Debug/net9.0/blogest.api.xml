<?xml version="1.0"?>
<doc>
    <assembly>
        <name>blogest.api</name>
    </assembly>
    <members>
        <member name="M:blogest.api.Contollers.AuthController.LogOut">
            <summary>
            Logs out the current user and invalidates their session/token.
            </summary>
            <returns>200 if logout successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.AuthController.SignUp(blogest.application.Features.commands.Auth.SignUpCommand)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="signUpCommand">User registration data.</param>
            <returns>200 if registration successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.AuthController.SignIn(blogest.application.Features.commands.Auth.SignInCommand)">
            <summary>
            Authenticates a user and returns a JWT token if successful.
            </summary>
            <param name="signInCommand">User login data.</param>
            <returns>200 if login successful, 401 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.AuthController.LoginWithGoogle">
            <summary>
            Initiates Google OAuth login flow.
            </summary>
            <returns>Redirects to Google login page.</returns>
        </member>
        <member name="M:blogest.api.Contollers.AuthController.GoogleCallback">
            <summary>
            Handles Google OAuth callback and logs in/creates the user.
            </summary>
            <returns>200 if successful, 400/401 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CategoriesCommandController.CreateCategory(blogest.application.Features.commands.Categories.CreateCategoryCommand)">
            <summary>
            Creates a new category.
            </summary>
            <param name="command">Category creation data.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsCommandController.CreateComment(blogest.application.Features.commands.Comments.CreateCommentCommand)">
            <summary>
            Creates a new comment on a post.
            </summary>
            <param name="createCommentCommand">Comment creation data.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsCommandController.DeleteComment(System.Guid)">
            <summary>
            Deletes a comment by its ID.
            </summary>
            <param name="commentId">The ID of the comment to delete.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsCommandController.UpdateComment(System.Guid,blogest.application.DTOs.requests.UpdateCommentRequestDto)">
            <summary>
            Updates the content of a comment.
            </summary>
            <param name="commentId">The ID of the comment to update.</param>
            <param name="content">The new content for the comment.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsQueryController.GetCommentById(System.Guid)">
            <summary>
            Gets a comment by its ID.
            </summary>
            <param name="CommentId">The ID of the comment.</param>
            <returns>The comment details.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsQueryController.GetAllCommentsByPostId(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets all comments on a post (paginated).
            </summary>
            <param name="PostId">The ID of the post.</param>
            <param name="pageNumber">Page number (default 1).</param>
            <param name="pageSize">Page size (default 10).</param>
            <returns>Paginated list of comments.</returns>
        </member>
        <member name="M:blogest.api.Contollers.CommentsQueryController.GetAllCommentsOfUser(System.Guid)">
            <summary>
            Gets all comments made by a user.
            </summary>
            <param name="UserId">The ID of the user.</param>
            <returns>List of comments by user.</returns>
        </member>
        <member name="M:blogest.api.Contollers.LikesCommandController.AddLike(System.Guid)">
            <summary>
            Adds a like to a post by the current user.
            </summary>
            <param name="postId">The ID of the post to like.</param>
            <returns>200 if successful, 400 if already liked or error.</returns>
        </member>
        <member name="M:blogest.api.Contollers.LikesCommandController.UnLike(System.Guid)">
            <summary>
            Removes a like from a post by the current user.
            </summary>
            <param name="postId">The ID of the post to unlike.</param>
            <returns>200 if successful, 404 if not found.</returns>
        </member>
        <member name="M:blogest.api.Contollers.LikesQueryController.GetPostLikes(System.Guid)">
            <summary>
            Gets all likes for a specific post.
            </summary>
            <param name="postId">The ID of the post.</param>
            <returns>List of users who liked the post.</returns>
        </member>
        <member name="M:blogest.api.Contollers.PostsQueryController.GetPostByIdAsync(System.Guid)">
            <summary>
            Gets a post by its ID.
            </summary>
            <param name="postId">The ID of the post.</param>
            <returns>The post details if found, 404 if not found.</returns>
        </member>
        <member name="M:blogest.api.Contollers.PostsQueryController.GetAllPostsByCategory(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Gets all posts in a category with pagination and optional includes.
            </summary>
            <param name="categoryId">The category ID.</param>
            <param name="pageNumber">Page number (default 1).</param>
            <param name="pageSize">Page size (default 10).</param>
            <param name="include">Related data to include (optional).</param>
            <returns>Paginated list of posts.</returns>
        </member>
        <member name="M:blogest.api.Contollers.PostsQueryController.GetAllPostsByUser(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all posts by a user with pagination and optional includes.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="include">Related data to include (optional).</param>
            <param name="pageNumber">Page number (default 1).</param>
            <param name="pageSize">Page size (default 10).</param>
            <returns>Paginated list of posts by user.</returns>
        </member>
        <member name="M:blogest.api.Contollers.PostsQueryController.GetPostsLikedByUser(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Gets all posts liked by a user.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="include">Related data to include (optional).</param>
            <param name="pageNumber">Page number (default 1).</param>
            <param name="pageSize">Page size (default 10).</param>
            <returns>Paginated list of liked posts.</returns>
        </member>
        <member name="M:blogest.api.Contollers.TokensController.Refresh(blogest.application.Features.commands.Tokens.TokenRequestCommand)">
            <summary>
            Refreshes the JWT access token using a valid refresh token.
            </summary>
            <param name="request">Refresh token request data.</param>
            <returns>New access token if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Controllers.PostsCommandController.CreatePost(blogest.application.Features.commands.Posts.CreatePostCommand)">
            <summary>
            Creates a new post.
            </summary>
            <param name="command">Post creation data.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Controllers.PostsCommandController.DeletePost(System.Guid)">
            <summary>
            Deletes a post by its ID.
            </summary>
            <param name="postId">The ID of the post to delete.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Controllers.PostsCommandController.DeletePostsByUser(System.Guid)">
            <summary>
            Deletes all posts by a specific user.
            </summary>
            <param name="userId">The ID of the user.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Controllers.PostsCommandController.UpdatePost(System.Guid,blogest.application.Features.commands.Posts.UpdatePostCommand)">
            <summary>
            Updates a post's title and content.
            </summary>
            <param name="postId">The ID of the post to update.</param>
            <param name="command">The new post data.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
        <member name="M:blogest.api.Controllers.PostsCommandController.UpdatePostCategories(System.Guid,System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the categories of a post.
            </summary>
            <param name="id">The ID of the post.</param>
            <param name="categoriesIds">List of category IDs.</param>
            <returns>200 if successful, 400 if failed.</returns>
        </member>
    </members>
</doc>
